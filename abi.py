# -*- coding: utf-8 -*-
"""ABI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-e-jsJ1EkuhBeAiaMqvnOI9m7BnNWIBO
"""

from pgmpy.models import BayesianNetwork
from pgmpy.factors.discrete import TabularCPD
import itertools

num_nodes = 20
p = 0.75
q = 0.25

edges = []
cpds = {}
for subset in itertools.combinations(list(range(num_nodes)), 3):
    n1, n2, n3 = subset
    tri_node = str(n1) + "_" + str(n2) + "_" + str(n3)

    evidence = []
    for u1, u2 in itertools.combinations(subset, 2):
        edge_node = str(u1) + "_" + str(u2)

        if u1 < num_nodes // 2 and u2 < num_nodes // 2:
            prob = p
        elif u1 >= num_nodes // 2 and u2 >= num_nodes // 2:
            prob = p
        else:
            prob = q

        cpds[edge_node] = TabularCPD(
            variable=edge_node,
            variable_card=2,
            values=[[1 - prob], [prob]]
        )
        evidence.append(edge_node)

    cpds[tri_node] = TabularCPD(
        variable=tri_node,
        variable_card=2,
        values=[[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]],
        evidence=evidence,
        evidence_card=[2, 2, 2],
    )

    for edge_node in evidence:
        edges.append((edge_node, tri_node))
    

graph_model = BayesianNetwork(edges)
graph_model.add_cpds(*list(cpds.values()))
# print(graph_model.check_model())

from pgmpy.inference import VariableElimination
graph_infer = VariableElimination(graph_model)

vars = []
expected_triangles = 0
for subset in itertools.combinations(list(range(num_nodes)), 3):
    n1, n2, n3 = subset
    tri_node = str(n1) + "_" + str(n2) + "_" + str(n3)
    vars.append(tri_node)

    q = graph_infer.query(variables=[tri_node])
    expected_triangles += q.values[1]
print(expected_triangles)

len(list(itertools.combinations(list(range(num_nodes)), 3)))

